{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","console","log","parse","responseText","send","setRequestHeader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAGKC,G,EAAK;AACf,4BAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACZ,+BAAOH,GAAP;AACH;;;wCAGGI,G,EAAK;AAAA;;AAEL,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFH,CAAP;AAIH;;;yCAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,+BAAOJ,MAAMD,GAAN,EAAW;AACdM,qCAAS,EAAE,gBAAiB,kBAAnB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,yBAAX,EAKNH,IALM,CAKD;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBALC,CAAP;AAOH;;;8CAESI,G,EAAI;AACV,+BAAO,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,KAAT,EAAgBhB,GAAhB;AACAc,gCAAIG,kBAAJ,GAAyB,YAAM;AAC3B,oCAAGH,IAAII,UAAJ,IAAkB,CAArB,EAAuB;AACnB,wCAAGJ,IAAIK,MAAJ,IAAc,GAAjB,EAAqB;AACjBC,gDAAQC,GAAR,CAAY,iCAAZ;AACAT,gDAAQH,KAAKa,KAAL,CAAWR,IAAIS,YAAf,CAAR;AACH,qCAHD,MAGK;AACDH,gDAAQC,GAAR,CAAY,qBAAqBP,IAAIS,YAArC;AACAV,+CAAOC,IAAIS,YAAX;AACH;AACJ;AACJ,6BAVD;AAWAT,gCAAIU,IAAJ;AACH,yBAfM,CAAP;AAgBH;;;+CAEUxB,G,EAAKK,I,EAAK;AACjB,+BAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,MAAT,EAAiBhB,GAAjB,EAAsB,IAAtB;AACAc,gCAAIW,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAX,gCAAIG,kBAAJ,GAAyB,YAAM;;AAE3B,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;;AAErB,wCAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;;AAEnBP,gDAAQH,KAAKa,KAAL,CAAWR,IAAIS,YAAf,CAAR;AACH,qCAHD,MAGO;;AAEHV,+CAAOC,IAAIS,YAAX;AACH;AACJ;AACJ,6BAZD;AAaAT,gCAAIU,IAAJ,CAASf,KAAKC,SAAL,CAAeL,IAAf,CAAT,EAlBoC,CAkBJ;AACnC,yBAnBM,CAAP;AAoBH","file":"HttpService.js","sourcesContent":["export class HttpService {\n\n\n    _handleErrors(res) {\n        if(!res.ok) throw new Error(res.statusText);\n        return res;\n    }\n\n\n    get(url) {\n\n        return fetch(url)\n            .then(res => this._handleErrors(res))\n            .then(res => res.json());\n        \n    }\n    \n    post(url, dado) {\n\n        return fetch(url, {\n            headers: { 'Content-type' : 'application/json'},\n            method: 'post',\n            body: JSON.stringify(dado)\n        })\n        .then(res => this._handleErrors(res));\n\n    }\n\n    getSemApi(url){\n        return new Promise((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            xhr.onreadystatechange = () => {\n                if(xhr.readyState == 4){\n                    if(xhr.status == 200){\n                        console.log(\"Obtendo informações do servidor\");\n                        resolve(JSON.parse(xhr.responseText));\n                    }else{\n                        console.log(\"Erro na conexão \" + xhr.responseText);\n                        reject(xhr.responseText);\n                    }\n                }\n            };\n            xhr.send();\n        });\n    }\n\n    postSemApi(url, dado){\n        return new Promise((resolve, reject) => {\n\n            let xhr = new XMLHttpRequest();\n            xhr.open(\"POST\", url, true);\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\n            xhr.onreadystatechange = () => {\n\n                if (xhr.readyState == 4) {\n\n                    if (xhr.status == 200) {\n\n                        resolve(JSON.parse(xhr.responseText));\n                    } else {\n\n                        reject(xhr.responseText);\n                    }\n                }\n            };\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\n        });\n    }\n}"]}